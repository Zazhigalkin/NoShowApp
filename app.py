import streamlit as st
import pandas as pd
import csv
from datetime import datetime, timedelta
from collections import defaultdict
import io

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ Noshow", page_icon="‚úàÔ∏è", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Noshow –¥–ª—è –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–æ–≤", type=['csv'])

if uploaded_file is not None:
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        content = uploaded_file.getvalue().decode('utf-8')
        st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):", content[:500], height=150)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        first_line = content.split('\n')[0]
        st.write(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞: {first_line}")
        
        delimiter = ';' if ';' in first_line else ','
        st.write(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{delimiter}'")
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        flights_data = defaultdict(lambda: defaultdict(list))
        all_flights = set()
        total_rows = 0
        processed_rows = 0
        
        # –°–æ–∑–¥–∞–µ–º StringIO –¥–ª—è csv.reader
        csv_file = io.StringIO(content)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        reader = csv.DictReader(csv_file, delimiter=delimiter)
        st.write(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: {reader.fieldnames}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
        csv_file.seek(0)
        reader = csv.DictReader(csv_file, delimiter=delimiter)
        
        problematic_rows = []
        
        for row_num, row in enumerate(reader, 1):
            try:
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if row_num <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                    st.write(f"–°—Ç—Ä–æ–∫–∞ {row_num}: {dict(list(row.items())[:5])}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not row.get('Flight') or not row.get('Date'):
                    problematic_rows.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    continue
                
                flight_number = row['Flight'].strip()
                date_str = row['Date'].strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not flight_number or not date_str:
                    continue
                
                date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                day_name = date_obj.strftime('%A')
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                bkd_str = row.get('seg_bkd_total', '0').strip()
                nsh_str = row.get('noshow', '0').strip()
                
                # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 0
                bkd = int(bkd_str) if bkd_str and bkd_str.isdigit() else 0
                nsh = int(nsh_str) if nsh_str and nsh_str.isdigit() else 0
                
                segment = row.get('Segment', '').strip()
                
                flights_data[flight_number][day_name].append((bkd, nsh, segment))
                all_flights.add(flight_number)
                total_rows += 1
                processed_rows += 1
                    
            except ValueError as e:
                problematic_rows.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –æ—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è - {e}")
                continue
            except Exception as e:
                problematic_rows.append(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
                continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        st.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {row_num}")
        st.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_rows}")
        st.write(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(problematic_rows)}")
        
        if problematic_rows:
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"):
                for problem in problematic_rows[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–±–ª–µ–º
                    st.write(problem)
        
        if all_flights:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤: {len(all_flights)}")
            st.write(f"–°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤: {', '.join(sorted(all_flights))}")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–π—Å–∞
            selected_flight = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", sorted(all_flights))
            
            if selected_flight:
                # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞
                flight_daily_data = flights_data[selected_flight]
                weekly_noshow_rate = {}
                weekly_avg_bookings = {}
                flight_segment = None
                
                st.write(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–π—Å–∞ {selected_flight}: {len(flight_daily_data)} –¥–Ω–µ–π")
                
                for day, data_list in flight_daily_data.items():
                    if not data_list:
                        continue
                        
                    total_bkd_day = 0
                    total_nsh_day = 0
                    
                    if flight_segment is None and data_list:
                        flight_segment = data_list[0][2]
                    
                    for bkd, nsh, segment in data_list:
                        total_bkd_day += bkd
                        total_nsh_day += nsh
                    
                    if total_bkd_day > 0:
                        weekly_noshow_rate[day] = total_nsh_day / total_bkd_day
                    else:
                        weekly_noshow_rate[day] = 0.0
                        
                    weekly_avg_bookings[day] = total_bkd_day // len(data_list) if data_list else 0
                
                # –°–µ–≥–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if flight_segment is None:
                    flight_segment = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–π—Å–∞ {selected_flight} {flight_segment}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
                    if weekly_noshow_rate:
                        for day, rate in sorted(weekly_noshow_rate.items()):
                            total_bkd = sum(bkd for bkd, nsh, seg in flight_daily_data[day])
                            total_nsh = sum(nsh for bkd, nsh, seg in flight_daily_data[day])
                            count = len(flight_daily_data[day])
                            
                            st.write(f"**{day}**: Rate={rate:.3f}, Noshow={total_nsh}, Bookings={total_bkd}, –†–µ–π—Å–æ–≤={count}")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞")
                
                with col2:
                    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
                    st.markdown("**üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:**")
                    today = datetime.now().date()
                    
                    if weekly_noshow_rate:
                        for i in range(7):
                            future_date = today + timedelta(days=i)
                            day_name = future_date.strftime('%A')
                            
                            rate = weekly_noshow_rate.get(day_name, 0)
                            avg_bookings = weekly_avg_bookings.get(day_name, 200)
                            predicted_noshow = avg_bookings * rate
                            
                            date_type = "üéØ –°–ï–ì–û–î–ù–Ø" if i == 0 else f"—á–µ—Ä–µ–∑ {i} –¥–Ω."
                            
                            st.write(f"**{future_date.strftime('%d.%m.%Y')}** ({day_name}) - {predicted_noshow:.1f} noshow")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if weekly_noshow_rate:
                    max_rate_day = max(weekly_noshow_rate, key=weekly_noshow_rate.get)
                    min_rate_day = min(weekly_noshow_rate, key=weekly_noshow_rate.get)
                    max_rate = weekly_noshow_rate[max_rate_day]
                    
                    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    st.info(f"**–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π noshow rate –≤ {max_rate_day}**: {max_rate:.3f} ({max_rate*100:.1f}%)")
                    
                    avg_bookings_max_day = weekly_avg_bookings.get(max_rate_day, 200)
                    recommended_overbooking = int(avg_bookings_max_day * max_rate)
                    
                    st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–ª—è {max_rate_day}**: {recommended_overbooking} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç")
        else:
            st.error("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
    
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª–∞"):
    st.markdown("""
    –§–∞–π–ª CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
    - **Flight** - –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞
    - **Date** - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    - **Segment** - –º–∞—Ä—à—Ä—É—Ç
    - **seg_bkd_total** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    - **noshow** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—è–≤–∏–≤—à–∏—Ö—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    
    –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
    ```
    Flight;Date;Segment;seg_bkd_total;noshow
    N4-281;01.09.2025;LED-KGD;216;6
    N4-281;02.09.2025;LED-KGD;192;7
    ```
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏:** –∑–∞–ø—è—Ç–∞—è (,) –∏–ª–∏ —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)
    """)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞
if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª"):
    st.rerun()
