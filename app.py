import streamlit as st
import pandas as pd
import csv
from datetime import datetime, timedelta
from collections import defaultdict
import io

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ Noshow by –ö–∏—Ä–∏–ª–ª", page_icon="‚úàÔ∏è", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Noshow –¥–ª—è –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–æ–≤", type=['csv'])

if uploaded_file is not None:
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π BOM
        content = uploaded_file.getvalue().decode('utf-8-sig')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –∏ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        lines = content.split('\n')[2:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏
        csv_content = '\n'.join(lines)
        
        # –°–æ–∑–¥–∞–µ–º StringIO –¥–ª—è csv.reader
        csv_file = io.StringIO(csv_content)
        reader = csv.DictReader(csv_file, delimiter=';')
        
        flights_data = defaultdict(lambda: defaultdict(list))
        all_flights = set()
        total_rows = 0
        
        for row in reader:
            try:
                # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                flight_number = row['–†–µ–π—Å'].strip()
                date_obj = datetime.strptime(row['–î–∞—Ç–∞'], '%d.%m.%Y')
                day_name = date_obj.strftime('%A')
                bkd = int(row['Seg Bkd Total'])  # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                nsh = int(row['Nsh'])  # Noshow
                segment = row['–°–µ–≥–º–µ–Ω—Ç'].strip()
                
                flights_data[flight_number][day_name].append((bkd, nsh, segment))
                all_flights.add(flight_number)
                total_rows += 1
                    
            except (KeyError, ValueError, TypeError) as e:
                continue
        
        st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ó–∞–ø–∏—Å–µ–π: {total_rows}, –†–µ–π—Å–æ–≤: {len(all_flights)}")
        
        if all_flights:
            # –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–π—Å–∞
            selected_flight = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", sorted(all_flights))
            
            if selected_flight:
                # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞
                flight_daily_data = flights_data[selected_flight]
                weekly_noshow_rate = {}
                weekly_avg_bookings = {}
                flight_segment = None
                
                for day, data_list in flight_daily_data.items():
                    if not data_list:
                        continue
                        
                    total_bkd_day = 0
                    total_nsh_day = 0
                    
                    if flight_segment is None and data_list:
                        flight_segment = data_list[0][2]
                    
                    for bkd, nsh, segment in data_list:
                        total_bkd_day += bkd
                        total_nsh_day += nsh
                    
                    if total_bkd_day > 0:
                        weekly_noshow_rate[day] = total_nsh_day / total_bkd_day
                    else:
                        weekly_noshow_rate[day] = 0.0
                        
                    weekly_avg_bookings[day] = total_bkd_day // len(data_list) if data_list else 0
                
                # –°–µ–≥–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if flight_segment is None:
                    flight_segment = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–π—Å–∞ {selected_flight} {flight_segment}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
                    if weekly_noshow_rate:
                        # –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                        days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                        russian_days = {
                            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                            'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                            'Wednesday': '–°—Ä–µ–¥–∞',
                            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                            'Saturday': '–°—É–±–±–æ—Ç–∞',
                            'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                        }
                        
                        for day in days_order:
                            if day in weekly_noshow_rate:
                                rate = weekly_noshow_rate[day]
                                total_bkd = sum(bkd for bkd, nsh, seg in flight_daily_data[day])
                                total_nsh = sum(nsh for bkd, nsh, seg in flight_daily_data[day])
                                count = len(flight_daily_data[day])
                                
                                st.write(f"**{russian_days[day]}**: Rate={rate:.3f}, Noshow={total_nsh}, Bookings={total_bkd}, –†–µ–π—Å–æ–≤={count}")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞")
                
                with col2:
                    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
                    st.markdown("**üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:**")
                    today = datetime.now().date()
                    
                    if weekly_noshow_rate:
                        russian_days = {
                            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                            'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                            'Wednesday': '–°—Ä–µ–¥–∞',
                            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                            'Saturday': '–°—É–±–±–æ—Ç–∞',
                            'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                        }
                        
                        for i in range(7):
                            future_date = today + timedelta(days=i)
                            day_name_en = future_date.strftime('%A')
                            day_name_ru = russian_days.get(day_name_en, day_name_en)
                            
                            rate = weekly_noshow_rate.get(day_name_en, 0)
                            avg_bookings = weekly_avg_bookings.get(day_name_en, 200)
                            predicted_noshow = avg_bookings * rate
                            
                            date_type = "üéØ –°–ï–ì–û–î–ù–Ø" if i == 0 else f"—á–µ—Ä–µ–∑ {i} –¥–Ω."
                            
                            st.write(f"**{future_date.strftime('%d.%m.%Y')}** ({day_name_ru}) - {predicted_noshow:.1f} noshow")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if weekly_noshow_rate:
                    max_rate_day = max(weekly_noshow_rate, key=weekly_noshow_rate.get)
                    min_rate_day = min(weekly_noshow_rate, key=weekly_noshow_rate.get)
                    max_rate = weekly_noshow_rate[max_rate_day]
                    
                    russian_days = {
                        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                        'Wednesday': '–°—Ä–µ–¥–∞',
                        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                        'Saturday': '–°—É–±–±–æ—Ç–∞',
                        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                    }
                    
                    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    st.info(f"**–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π noshow rate –≤ {russian_days.get(max_rate_day, max_rate_day)}**: {max_rate:.3f} ({max_rate*100:.1f}%)")
                    
                    avg_bookings_max_day = weekly_avg_bookings.get(max_rate_day, 200)
                    recommended_overbooking = int(avg_bookings_max_day * max_rate)
                    
                    st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–ª—è {russian_days.get(max_rate_day, max_rate_day)}**: {recommended_overbooking} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç")
        else:
            st.error("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª–∞"):
    st.markdown("""
    **–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV —Ñ–∞–π–ª–µ:**
    - **–†–µ–π—Å** - –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞
    - **–î–∞—Ç–∞** - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY  
    - **–°–µ–≥–º–µ–Ω—Ç** - –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: LED-KGD)
    - **Seg Bkd Total** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    - **Nsh** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—è–≤–∏–≤—à–∏—Ö—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (noshow)

    **–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞:**
    ```
    –†–µ–π—Å;–î–∞—Ç–∞;–°–µ–≥–º–µ–Ω—Ç;Seg Bkd Total;Nsh
    N4-281;01.09.2025;LED-KGD;216;6
    N4-281;02.09.2025;LED-KGD;192;7
    ```
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """)
