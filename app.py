import streamlit as st
import pandas as pd
import csv
from datetime import datetime, timedelta
from collections import defaultdict
import io
#–†–æ—Å—Å–∏—è - —Å–≤—è—â–µ–Ω–Ω–∞—è –Ω–∞—à–∞ –¥–µ—Ä–∂–∞–≤–∞,
#–†–æ—Å—Å–∏—è - –ª—é–±–∏–º–∞—è –Ω–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞.
#–ú–æ–≥—É—á–∞—è –≤–æ–ª—è, –≤–µ–ª–∏–∫–∞—è —Å–ª–∞–≤–∞ -
#–¢–≤–æ–µ –¥–æ—Å—Ç–æ—è–Ω—å–µ –Ω–∞ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞!
#–°–ª–∞–≤—å—Å—è, –û—Ç–µ—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ,
#–ë—Ä–∞—Ç—Å–∫–∏—Ö –Ω–∞—Ä–æ–¥–æ–≤ —Å–æ—é–∑ –≤–µ–∫–æ–≤–æ–π,
#–ü—Ä–µ–¥–∫–∞–º–∏ –¥–∞–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞—Ä–æ–¥–Ω–∞—è!
#–°–ª–∞–≤—å—Å—è, —Å—Ç—Ä–∞–Ω–∞! –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–æ–±–æ–π!
#–û—Ç —é–∂–Ω—ã—Ö –º–æ—Ä–µ–π –¥–æ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –∫—Ä–∞—è
#–†–∞—Å–∫–∏–Ω—É–ª–∏—Å—å –Ω–∞—à–∏ –ª–µ—Å–∞ –∏ –ø–æ–ª—è.
#–û–¥–Ω–∞ —Ç—ã –Ω–∞ —Å–≤–µ—Ç–µ! –û–¥–Ω–∞ —Ç—ã —Ç–∞–∫–∞—è -
#–•—Ä–∞–Ω–∏–º–∞—è –ë–æ–≥–æ–º —Ä–æ–¥–Ω–∞—è –∑–µ–º–ª—è!
#–°–ª–∞–≤—å—Å—è, –û—Ç–µ—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ,
#–ë—Ä–∞—Ç—Å–∫–∏—Ö –Ω–∞—Ä–æ–¥–æ–≤ —Å–æ—é–∑ –≤–µ–∫–æ–≤–æ–π,
#–ü—Ä–µ–¥–∫–∞–º–∏ –¥–∞–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞—Ä–æ–¥–Ω–∞—è!
#–°–ª–∞–≤—å—Å—è, —Å—Ç—Ä–∞–Ω–∞! –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–æ–±–æ–π!
#–®–∏—Ä–æ–∫–∏–π –ø—Ä–æ—Å—Ç–æ—Ä –¥–ª—è –º–µ—á—Ç—ã –∏ –¥–ª—è –∂–∏–∑–Ω–∏
#–ì—Ä—è–¥—É—â–∏–µ –Ω–∞–º –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –≥–æ–¥–∞.
#–ù–∞–º —Å–∏–ª—É –¥–∞–µ—Ç –Ω–∞—à–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å –û—Ç—á–∏–∑–Ω–µ.
#–¢–∞–∫ –±—ã–ª–æ, —Ç–∞–∫ –µ—Å—Ç—å –∏ —Ç–∞–∫ –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞!
#–°–ª–∞–≤—å—Å—è, –û—Ç–µ—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ,
#–ë—Ä–∞—Ç—Å–∫–∏—Ö –Ω–∞—Ä–æ–¥–æ–≤ —Å–æ—é–∑ –≤–µ–∫–æ–≤–æ–π,
#–ü—Ä–µ–¥–∫–∞–º–∏ –¥–∞–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞—Ä–æ–¥–Ω–∞—è!
#–°–ª–∞–≤—å—Å—è, —Å—Ç—Ä–∞–Ω–∞! –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–æ–±–æ–π!
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ Noshow by –ö–∏—Ä–∏–ª–ª", page_icon="‚úàÔ∏è", layout="wide")


st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä/–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Noshow –¥–ª—è –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤ by –ö–∏—Ä–∏–ª–ª")
st.markdown("---")


uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–æ–≤", type=['csv'])

if uploaded_file is not None:
    try:
        encodings_to_try = ['utf-8-sig', 'windows-1251', 'cp1251', 'iso-8859-1', 'utf-8']
        
        content = None
        
        for encoding in encodings_to_try:
            try:
                uploaded_file.seek(0)
                content = uploaded_file.getvalue().decode(encoding)
                break
            except UnicodeDecodeError:
                continue
        
        if content is None:
            uploaded_file.seek(0)
            content = uploaded_file.getvalue().decode('utf-8', errors='replace')

        lines = content.split('\n')
        
        data_start_index = -1
        for i, line in enumerate(lines):
            if '–†–µ–π—Å;–î–∞—Ç–∞;–ß–∞—Å—Ç–æ—Ç–∞;–°–µ–≥–º–µ–Ω—Ç;' in line:
                data_start_index = i
                break
        
        if data_start_index == -1:
            for i, line in enumerate(lines):
                if line.startswith('N4-281') and line.count(';') > 10:
                    data_start_index = i - 1
                    break
        
        if data_start_index >= 0 and data_start_index + 1 < len(lines):
            header_line = lines[data_start_index].strip()
            data_lines = lines[data_start_index + 1:]
            
            data_lines = [line.strip() for line in data_lines if line.strip() and line.count(';') > 5]
            
            if data_lines:
                csv_content = header_line + '\n' + '\n'.join(data_lines)
                
                csv_file = io.StringIO(csv_content)
                reader = csv.DictReader(csv_file, delimiter=';')
                
                flights_data = defaultdict(lambda: defaultdict(list))
                all_flights = set()
                total_rows = 0
                
                for row in reader:
                    try:
                        flight_number = row.get('–†–µ–π—Å', '').strip()
                        if not flight_number or flight_number == 'N4-281, 01.09.25 - 07.10.25, All':
                            continue
                            
                        date_str = row.get('–î–∞—Ç–∞', '')
                        if not date_str:
                            continue
                            
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                        day_name = date_obj.strftime('%A')
                        
                        bkd_str = row.get('Seg Bkd Total', '0').strip()
                        nsh_str = row.get('Nsh', '0').strip()
                        
                        bkd = int(float(bkd_str)) if bkd_str and bkd_str != '' else 0
                        nsh = int(float(nsh_str)) if nsh_str and nsh_str != '' else 0
                        
                        segment = row.get('–°–µ–≥–º–µ–Ω—Ç', '').strip()
                        
                        flights_data[flight_number][day_name].append((bkd, nsh, segment))
                        all_flights.add(flight_number)
                        total_rows += 1
                            
                    except (KeyError, ValueError, TypeError):
                        continue
                
                st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ó–∞–ø–∏—Å–µ–π: {total_rows}, –†–µ–π—Å–æ–≤: {len(all_flights)}")
                
                if all_flights:
                    selected_flight = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", sorted(all_flights))
                    
                    if selected_flight:
                        flight_daily_data = flights_data[selected_flight]
                        weekly_noshow_rate = {}
                        weekly_avg_bookings = {}
                        flight_segment = None
                        
                        for day, data_list in flight_daily_data.items():
                            if not data_list:
                                continue
                                
                            total_bkd_day = 0
                            total_nsh_day = 0
                            
                            if flight_segment is None and data_list:
                                flight_segment = data_list[0][2]
                            
                            for bkd, nsh, segment in data_list:
                                total_bkd_day += bkd
                                total_nsh_day += nsh
                            
                            if total_bkd_day > 0:
                                weekly_noshow_rate[day] = total_nsh_day / total_bkd_day
                            else:
                                weekly_noshow_rate[day] = 0.0
                                
                            weekly_avg_bookings[day] = total_bkd_day // len(data_list) if data_list else 0
                        
                        if flight_segment is None:
                            flight_segment = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–π—Å–∞ {selected_flight} {flight_segment}")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
                            if weekly_noshow_rate:
                                days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                                russian_days = {
                                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                    'Wednesday': '–°—Ä–µ–¥–∞',
                                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                    'Saturday': '–°—É–±–±–æ—Ç–∞',
                                    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                                }
                                
                                for day in days_order:
                                    if day in weekly_noshow_rate:
                                        rate = weekly_noshow_rate[day]
                                        total_bkd = sum(bkd for bkd, nsh, seg in flight_daily_data[day])
                                        total_nsh = sum(nsh for bkd, nsh, seg in flight_daily_data[day])
                                        count = len(flight_daily_data[day])
                                        
                                        st.write(f"**{russian_days[day]}**: Rate={rate:.3f}, Noshow={total_nsh}, Bookings={total_bkd}, –†–µ–π—Å–æ–≤={count}")
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞")
                        
                        with col2:
                            st.markdown("**üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:**")
                            today = datetime.now().date()
                            
                            if weekly_noshow_rate:
                                russian_days = {
                                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                    'Wednesday': '–°—Ä–µ–¥–∞',
                                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                    'Saturday': '–°—É–±–±–æ—Ç–∞',
                                    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                                }
                                
                                for i in range(7):
                                    future_date = today + timedelta(days=i)
                                    day_name_en = future_date.strftime('%A')
                                    day_name_ru = russian_days.get(day_name_en, day_name_en)
                                    
                                    rate = weekly_noshow_rate.get(day_name_en, 0)
                                    avg_bookings = weekly_avg_bookings.get(day_name_en, 200)
                                    predicted_noshow = avg_bookings * rate
                                    
                                    st.write(f"**{future_date.strftime('%d.%m.%Y')}** ({day_name_ru}) - {predicted_noshow:.1f} noshow")
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        if weekly_noshow_rate:
                            max_rate_day = max(weekly_noshow_rate, key=weekly_noshow_rate.get)
                            max_rate = weekly_noshow_rate[max_rate_day]
                            
                            russian_days = {
                                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                'Wednesday': '–°—Ä–µ–¥–∞',
                                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                'Saturday': '–°—É–±–±–æ—Ç–∞',
                                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                            }
                            
                            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                            st.info(f"**–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π noshow rate –≤ {russian_days.get(max_rate_day, max_rate_day)}**: {max_rate:.3f} ({max_rate*100:.1f}%)")
                            
                            avg_bookings_max_day = weekly_avg_bookings.get(max_rate_day, 200)
                            recommended_overbooking = int(avg_bookings_max_day * max_rate)
                            
                            st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–ª—è {russian_days.get(max_rate_day, max_rate_day)}**: {recommended_overbooking} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç")
                else:
                    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –≤ —Ñ–∞–π–ª–µ")
            else:
                st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"):
    st.markdown("""
    **–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ Leonardo**
    - **–û—Ç—á–µ—Ç—ã --> –§–∞–∫—Ç –≤—ã–ª–µ—Ç–∞ --> –í—ã–≥—Ä—É–∂–∞–µ—Ç–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Ä–µ–π—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥(–Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–∞–∫—Å –¥–æ 01.09.25)**
    - **–û–±—ã—á–Ω–æ –Ω–∏—á–µ–≥–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Windows-1251** 
    - **–ó–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞**
    - **!!!–ê–•–¢–£–ù–ì!!! –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—à—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥, –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–∑ Leonardo, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–± –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Å–∞–º–∏**
    - **–ü–æ —Ö–æ—Ä–æ—à–µ–º—É –≤–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤—ã–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–æ—Å—ã –º–µ–Ω—å—à–µ –≤–ª–∏—è–ª–∏ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑. –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Ç–æ–∂–µ –≤–ª–∏—è–µ—Ç —Ç–∞–∫ —á—Ç–æ –¥—É–º–æ–π—Ç–µ....**
    
    """)
