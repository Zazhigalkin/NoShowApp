import streamlit as st
import pandas as pd
import csv
from datetime import datetime, timedelta
from collections import defaultdict
import io

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ Noshow by –ö–∏—Ä–∏–ª–ª", page_icon="‚úàÔ∏è", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Noshow –¥–ª—è –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤")
st.markdown("---")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Å–æ–≤", type=['csv'])

if uploaded_file is not None:
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings_to_try = ['utf-8-sig', 'windows-1251', 'cp1251', 'iso-8859-1', 'utf-8']
        
        content = None
        used_encoding = None
        
        for encoding in encodings_to_try:
            try:
                uploaded_file.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞
                content = uploaded_file.getvalue().decode(encoding)
                used_encoding = encoding
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
                break
            except UnicodeDecodeError:
                continue
        
        if content is None:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º force decode
            uploaded_file.seek(0)
            content = uploaded_file.getvalue().decode('utf-8', errors='replace')
            used_encoding = 'utf-8 (with errors replaced)'
            st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–º–µ–Ω–æ–π –æ—à–∏–±–æ–∫")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
        lines = content.split('\n')
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–≥–¥–µ –µ—Å—Ç—å "–†–µ–π—Å;–î–∞—Ç–∞;–ß–∞—Å—Ç–æ—Ç–∞" –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å N4-281)
        header_line_index = -1
        for i, line in enumerate(lines):
            if '–†–µ–π—Å;–î–∞—Ç–∞;–ß–∞—Å—Ç–æ—Ç–∞' in line or '–†–µ–π—Å;–î–∞—Ç–∞' in line:
                header_line_index = i
                break
            if line.startswith('N4-281') and ';' in line:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ
                header_line_index = i - 2 if i >= 2 else 0
                break
        
        if header_line_index == -1:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—â–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            for i, line in enumerate(lines):
                if ';' in line and ('–†–µ–π—Å' in line or '–î–∞—Ç–∞' in line or 'Seg Bkd Total' in line):
                    header_line_index = i
                    break
        
        if header_line_index >= 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
            data_lines = lines[header_line_index:]
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            data_lines = [line.strip() for line in data_lines if line.strip() and not line.replace(';', '').strip() == '']
            
            if len(data_lines) > 1:
                # –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
                csv_content = '\n'.join(data_lines)
                
                # –°–æ–∑–¥–∞–µ–º StringIO –¥–ª—è csv.reader
                csv_file = io.StringIO(csv_content)
                reader = csv.DictReader(csv_file, delimiter=';')
                
                flights_data = defaultdict(lambda: defaultdict(list))
                all_flights = set()
                total_rows = 0
                processed_rows = []
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
                available_fields = reader.fieldnames if reader.fieldnames else []
                st.write(f"üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {available_fields}")
                
                for row in reader:
                    try:
                        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                        flight_number = row.get('–†–µ–π—Å', '').strip()
                        if not flight_number:
                            continue
                            
                        date_str = row.get('–î–∞—Ç–∞', '')
                        if not date_str:
                            continue
                            
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                        day_name = date_obj.strftime('%A')
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                        bkd_str = row.get('Seg Bkd Total', '0').strip()
                        nsh_str = row.get('Nsh', '0').strip()
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        bkd = int(float(bkd_str)) if bkd_str and bkd_str != '' else 0
                        nsh = int(float(nsh_str)) if nsh_str and nsh_str != '' else 0
                        
                        segment = row.get('–°–µ–≥–º–µ–Ω—Ç', '').strip()
                        
                        flights_data[flight_number][day_name].append((bkd, nsh, segment))
                        all_flights.add(flight_number)
                        total_rows += 1
                        processed_rows.append({
                            '–†–µ–π—Å': flight_number,
                            '–î–∞—Ç–∞': date_str,
                            '–°–µ–≥–º–µ–Ω—Ç': segment,
                            'Seg Bkd Total': bkd,
                            'Nsh': nsh
                        })
                            
                    except (KeyError, ValueError, TypeError) as e:
                        st.write(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
                        continue
                
                st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ó–∞–ø–∏—Å–µ–π: {total_rows}, –†–µ–π—Å–æ–≤: {len(all_flights)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                if processed_rows:
                    st.subheader("üìã –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π)")
                    preview_df = pd.DataFrame(processed_rows[:5])
                    st.dataframe(preview_df)
                
                if all_flights:
                    # –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–π—Å–∞
                    selected_flight = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", sorted(all_flights))
                    
                    if selected_flight:
                        # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞
                        flight_daily_data = flights_data[selected_flight]
                        weekly_noshow_rate = {}
                        weekly_avg_bookings = {}
                        flight_segment = None
                        
                        for day, data_list in flight_daily_data.items():
                            if not data_list:
                                continue
                                
                            total_bkd_day = 0
                            total_nsh_day = 0
                            
                            if flight_segment is None and data_list:
                                flight_segment = data_list[0][2]
                            
                            for bkd, nsh, segment in data_list:
                                total_bkd_day += bkd
                                total_nsh_day += nsh
                            
                            if total_bkd_day > 0:
                                weekly_noshow_rate[day] = total_nsh_day / total_bkd_day
                            else:
                                weekly_noshow_rate[day] = 0.0
                                
                            weekly_avg_bookings[day] = total_bkd_day // len(data_list) if data_list else 0
                        
                        # –°–µ–≥–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if flight_segment is None:
                            flight_segment = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–π—Å–∞ {selected_flight} {flight_segment}")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**")
                            if weekly_noshow_rate:
                                # –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                                days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                                russian_days = {
                                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                    'Wednesday': '–°—Ä–µ–¥–∞',
                                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                    'Saturday': '–°—É–±–±–æ—Ç–∞',
                                    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                                }
                                
                                for day in days_order:
                                    if day in weekly_noshow_rate:
                                        rate = weekly_noshow_rate[day]
                                        total_bkd = sum(bkd for bkd, nsh, seg in flight_daily_data[day])
                                        total_nsh = sum(nsh for bkd, nsh, seg in flight_daily_data[day])
                                        count = len(flight_daily_data[day])
                                        
                                        st.write(f"**{russian_days[day]}**: Rate={rate:.3f}, Noshow={total_nsh}, Bookings={total_bkd}, –†–µ–π—Å–æ–≤={count}")
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞")
                        
                        with col2:
                            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
                            st.markdown("**üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:**")
                            today = datetime.now().date()
                            
                            if weekly_noshow_rate:
                                russian_days = {
                                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                    'Wednesday': '–°—Ä–µ–¥–∞',
                                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                    'Saturday': '–°—É–±–±–æ—Ç–∞',
                                    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                                }
                                
                                for i in range(7):
                                    future_date = today + timedelta(days=i)
                                    day_name_en = future_date.strftime('%A')
                                    day_name_ru = russian_days.get(day_name_en, day_name_en)
                                    
                                    rate = weekly_noshow_rate.get(day_name_en, 0)
                                    avg_bookings = weekly_avg_bookings.get(day_name_en, 200)
                                    predicted_noshow = avg_bookings * rate
                                    
                                    date_type = "üéØ –°–ï–ì–û–î–ù–Ø" if i == 0 else f"—á–µ—Ä–µ–∑ {i} –¥–Ω."
                                    
                                    st.write(f"**{future_date.strftime('%d.%m.%Y')}** ({day_name_ru}) - {predicted_noshow:.1f} noshow")
                            else:
                                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        if weekly_noshow_rate:
                            max_rate_day = max(weekly_noshow_rate, key=weekly_noshow_rate.get)
                            min_rate_day = min(weekly_noshow_rate, key=weekly_noshow_rate.get)
                            max_rate = weekly_noshow_rate[max_rate_day]
                            
                            russian_days = {
                                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                                'Wednesday': '–°—Ä–µ–¥–∞',
                                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                                'Saturday': '–°—É–±–±–æ—Ç–∞',
                                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                            }
                            
                            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                            st.info(f"**–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π noshow rate –≤ {russian_days.get(max_rate_day, max_rate_day)}**: {max_rate:.3f} ({max_rate*100:.1f}%)")
                            
                            avg_bookings_max_day = weekly_avg_bookings.get(max_rate_day, 200)
                            recommended_overbooking = int(avg_bookings_max_day * max_rate)
                            
                            st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–ª—è {russian_days.get(max_rate_day, max_rate_day)}**: {recommended_overbooking} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç")
                else:
                    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –≤ —Ñ–∞–π–ª–µ")
            else:
                st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ")
            st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª —Å —è–≤–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: –†–µ–π—Å;–î–∞—Ç–∞;–°–µ–≥–º–µ–Ω—Ç;Seg Bkd Total;Nsh")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ';'")

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª–∞"):
    st.markdown("""
    **–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ CSV —Ñ–∞–π–ª–µ:**
    - **–†–µ–π—Å** - –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞
    - **–î–∞—Ç–∞** - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY  
    - **–°–µ–≥–º–µ–Ω—Ç** - –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: LED-KGD)
    - **Seg Bkd Total** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    - **Nsh** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—è–≤–∏–≤—à–∏—Ö—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (noshow)

    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
    - –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ **UTF-8**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å **—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)**
    - –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤

    **–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:**
    ```
    –†–µ–π—Å;–î–∞—Ç–∞;–°–µ–≥–º–µ–Ω—Ç;Seg Bkd Total;Nsh
    N4-281;01.09.2025;LED-KGD;216;6
    N4-281;02.09.2025;LED-KGD;192;7
    N4-281;03.09.2025;LED-KGD;189;3
    ```

    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.
    """)
